---
title: "Industrialise Pipeline"
format: pdf
---

```{r}
list_my_functions <- list.files(path = "./R", pattern = "\\.R", full.names = TRUE)
list_my_functions |> purrr::walk(.f = ~ source(.x))
```


## Overview

This Quarto document provides a staged approach to generating the data for the ICNS2023 paper.

1. load and extract test data for the studied European airports
2. .... generate mickey & store interim results
3. ... do results


## Load and extract study data

```{r}
#| message: false
load_osn_dumps <- function(.ptn, .pth_to_dumps){
    # list downloaded dumps
    fns <- list.files(path = .pth_to_dumps, pattern = .ptn, full.names = TRUE)

    # load list of chosen dumps
    ds  <- fns |> 
      purrr::map_dfr(.f = read_osn_tar_file) |> 
      make_nice_names_osn()
    ds <- ds |> 
      dplyr::mutate(
            dplyr::across(
                  .cols = c("ALT_B","ALT_G")
                , .fns  = coerce_meter_to_feet)
            ) 
    ds <- ds |> coerce_unixepoch_to_datetime()
    return(ds)
}

extract_and_save_jormungand_data <- function(
    .apt, .range = 205, .ds, .save_path = "./data-study/"
    , .save_label = ptn
    , .aip_file = "./data/aip-arp-rwys.csv", ...
    ){
  # load AIP data for study  
  aip <- read_csv(.aip_file, show_col_types = FALSE)
  # extract airport ARP
  arp <- filter(aip, ICAO == .apt, REF == "ARP") |> dplyr::rename(ELEV = GEOM_ALT)
  jormungand <- establish_radial_jormungand(arp, .range) |> 
    dplyr::mutate(REF = paste(ICAO,REF,.range, sep = "-")) |> 
    dplyr::select(ICAO, REF, geometry)
  
  # subset study data for range
  svs <- spatial_subset_jormungand(.ds, jormungand)
  
  # write out study data by airport range
  fn_out <- paste0(.save_path, .apt, "-200NM-", .save_label, ".parquet")
  message(paste0("writing ", fn_out))
  arrow::write_parquet(svs |> sf::st_drop_geometry(), fn_out)
}

extract_and_save_study_dataset_for_airport <- function(
    .study_apts
    ,.ptn, .pth_to_dumps, .range = 205, ...
){
  # get osn dump
 
}

```

Loaded: 
 2019-08-01, 02, 03, 04, 05, 06, 07
 2022-08-01, ... 07, 08, 09

```{}
# European study data
pth_to_dumps <- "../__DATA/OSN-dumps"
ptn <- "2022-08-09"
study_apts <- c("EGLL","EDDM","EDDF", "LSZH","EHAM")

 osn <- load_osn_dumps(ptn, pth_to_dumps)
  #subset for study airports
  study_apts |> 
    purrr::walk( .f = ~ extract_and_save_jormungand_data(.x, .ds = osn) )
```

to-do: read-in Brazil use-case, if time permits US use-case: KATL


## Prepare study data set and write it out

```{r}
study_loop <- function(.apt, .fn, .debug, ...){
  
  #----------- read airport data -------------------------
  aip <- readr::read_csv("./data/aip-arp-rwys.csv", show_col_types = FALSE) |> 
    dplyr::filter(ICAO == .apt)
  if("GEOM_ALT" %in% names(aip)){
    aip <- aip |> dplyr::rename(ELEV = GEOM_ALT)
    }
  
  arp     <- aip |> dplyr::filter(ICAO == .apt,   REF == "ARP")
  rwys    <- aip |> dplyr::filter(ICAO == .apt, ! REF == "ARP")
  rwy_centerline_ls <- cast_rwy_ctr_line_ls(rwys)
  apt_box <- airport_centerline_box(rwys, ...) 
  
  # ---------------------- load trajectory data --------------------------------
  warning(paste(.apt, " - reading - ", .fn))
  # check entry file format
  if(file_extension(.fn) == "parquet"){
    ds <- arrow::read_parquet(.fn)
  }
  if(file_extension(.fn) == "feather"){
    ds <- arrow::read_feather(.fn)
  }
  ds <- ds %>%
    tibble::as_tibble() |>
    #---- enforce above threshold ~ ELEV arp
    dplyr::filter(ALT_B >= arp$ELEV + 300) |>
     fix_altitude_heuristic() |>
     Alt_Outlier_filter(.alt_var = ALT_B)
  
  #---------------------- check for local traffic ----------------------------
  # subset icao24s inside airport box
  seen_at_airport <- ds |> 
    dplyr::filter(ALT_B <= arp$ELEV + 4000) |> 
    spatial_subset_jormungand(apt_box, ...) |> 
    dplyr::distinct(ICAO24) 
  
  ds <- ds |> 
    dplyr::filter(ICAO24 %in% seen_at_airport$ICAO24) |> 
    identify_trajectory_legs(.max_gap = 5) |> 
    mutate(UID = paste(ICAO24, LEG, sep = "-")) 
  
  phase <- ds |> 
    extract_4d_nest() |> 
    confirm_arrival_at(apt_box, rwy_centerline_ls) |> 
    check_arrival_orphan()
  
  # # # add landing time
  phase_and_ldgtime <- add_landing_time(phase, rwys)
}

add_landing_time <- function(phase, rwys){
  
  arrs <- phase |> filter(ARR & !ORPHAN)
  rest <- phase |> filter(! UID %in% arrs$UID )
  
  with_ldg_time <-  arrs |>
    # estimate and assign landing time to arrival trajectories
    dplyr::mutate(
      study_trj = pmap(
              .l = list(data, UID, RWY)
            , .f = ~ add_landing_time_to_nested_data(..1, ..2, ..3, rwys)
            )
      ) |> 
    # pullout ALDT as separate column
    dplyr::mutate(
      ALDT = map(.x = study_trj
               , .f = ~ filter(.x, MST == "ALDT") |> pull(TIME)
               )
      ) |> tidyr::unnest(ALDT) |> 
    # interpolate to 5sec
    dplyr::mutate(
      study_trj = map(.x = study_trj
                    , .f = ~ interpolate_lin_4D(.x, .source = "OSN") |> 
                             add_time_and_distance_to_go() |> 
                             dplyr::mutate(H3_BIN = h3::geo_to_h3(c(LAT, LON), res = 8))
                    )
      )
  
  return(bind_rows(with_ldg_time, rest))
}
# safe_add_landing_time <- purrr::possibly(.f = add_landing_time, otherwise = NULL)
# 
# # make this fail safe
# safe_study_loop <- purrr::safely(.f = study_loop)
```

```{r}
#| message: false
apt <- "EGLL"
rwys <- readr::read_csv("./data/aip-arp-rwys.csv", show_col_types = FALSE) |> 
  filter(ICAO == apt) |> filter(TYPE == "THR") |> rename(ELEV = GEOM_ALT)

#fn  <- list.files(path = "./data", pattern = paste0(apt,".*\\.feather"), full.names = TRUE)
fn  <- list.files(path = "./data-study", pattern = paste0("^", apt, "-200NM-"), full.names = TRUE)[-c(1:2)]
ptn <- as.Date(str_extract(fn, "\\d{4}-\\d{2}-\\d{2}"), format="%Y-%m-%d")


purrr::walk2(.x = fn[5], .y[5] = ptn
             ,  .f = ~ study_loop(apt, .x) |> 
                     readr::write_rds(file = paste0("./data-study/mickey-", apt, "-", .y[5], ".rds") )
)

```
