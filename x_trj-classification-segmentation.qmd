---
title: "Trajectory Classification"
format: html
---

```{r setup}
# setup
library(tidyverse)
library(sf)

source(here::here("R", "level_segments_check.R"))
source(here::here("R", "altitude_outlier_filter.R"))

# set default ggplot theme
ggplot2::theme_set(ggplot2::theme_minimal())
```

DEVELOPMENT VERION

# Overview

We conceptualise 

* a **trajectory** as the time-ordered sequence of 4D positions of a flight;
* a **flight** is an air transport movement from a departure aerodrome to its destination aerodrome;
* flights could include segments with specific operations (e.g. military flights: military exercise area, refueling, all flights: flight maneuvers, holding, low approach/touch-and-go)
* outside of these specific operations, flights progress through phases: (i) parking, (ii) taxi-out, including take-off roll, (iii) initial climb-out, (iv) climb-out, (v) en-route, (vi) decent, (vii) final approach, (viii) taxi-in to parking position.

download sample = state vector data (4D positions)

==> split flights into DA(I)O ~ ODA

```{mermaid}
%%| fig-width: 6
flowchart LR
  OSN[(Opensky \nNetwork)] 
  OSN --> A[Data \nExtraction] 
  A --> FP(Flight Phases)
  A --> B(Arrival \nTrajectories)
  FP -.- B
```




# Model Development 

Load test data set (BAWs @ EGLL)

```{r}
tst_fn  <- "tst-egll-baw.csv.gz"
tst_pth <- here::here("data", tst_fn)
baws <- read_csv(tst_pth, show_col_types = FALSE)

if(class(baws$TIME) == "numeric") baws <- baws |> coerce_unixepoch_to_datetime()

# clean trajectory
baws <- baws |> Alt_Outlier_filter(.alt_var = ALT_B)
```

TODO = outlier filter works well when airborne, ground jumps not picked up

```{r}
baws |> 
ggplot() +
  geom_point(aes(x = TIME, y = ALT_B, color = FLTID))
```

## Flight Table and Milestone Table

A flight can be characterised by a series of milestones.    
Specific milestones (and supporting data) can be extracted in form of a flight table.

Unique flight identification:

An aircraft (identifiable by its ICAO24 address) can perform multiple flights on a given day.
Flights may enter/leave the coverage area.
Conceptually - and within the studied context of flights operating at European airports / night flying restrictions - the associated of the date of flight and ICAO24 address including the FLTID can serve as a unique key.

Milestone table allows for combining flights on day n and n+1, as characteristic milestones and their time offset allow for an association (and subsequent cleaning of the UID - not part of this study).

### Identify "flights" 

On the basic level, flights are detected between START (first seen) and END (last seen) of an ICAO24 - typically - using a single FLTID

```{r}
identify_legs <- function(.trjs, .uid = ICAO24, .max_step = 300){
  .trjs |> 
    dplyr::group_by({{.uid}}) |> 
    dplyr::arrange(TIME) |> 
    dplyr::mutate(
       STEP = difftime(TIME, lag(TIME, default = dplyr::first(TIME))) |> as.numeric()
      ,LEG  = cumsum(STEP > .max_step)
      ,N_ID = length(unique(FLTID))
      ) |> 
    ungroup()
} 
make_uid <- function(.trjs_legs){
  .trjs_legs |> 
    dplyr::mutate(
       DOF = lubridate::date(TIME) 
      ,UID = paste(ICAO24, DOF, LEG, sep = "-")
      ) |> 
    dplyr::select(UID, ICAO24, TIME, LAT, LON, ALT_B, FLTID, everything())
}

init_flight_table <- function(.trjs_uid){
  this_flt <- .trjs_uid  |> 
    dplyr::summarise(
       UID = unique(UID)
      ,FLTID = unique(FLTID) 
      ,N   = n()
      ,FIRST = min(TIME), LAST = max(TIME), DUR = difftime(LAST, FIRST, units = "min")
      ,.by = UID
      ) 
}

init_milestone_table <- function(.trj_uid){
  this_mst <- .trj_uid  |> 
    dplyr::slice(c(1,n())) |> 
    dplyr::mutate(MST = c("START","STOP")) |> 
    dplyr::select(ICAO24, FLTID, TIME, LAT, LON, ALT_B, MST)
}
```


```{r}
baws <- baws |> identify_legs() |> make_uid() 
mst <- baws |> 
  group_by(UID) |> 
  group_modify(.f = ~ init_milestone_table(.x))
```

DETECT LEVEL SEGMENTS
TOC / TOD

```{r}
baws |> filter(FLTID == "BAW236") |> check_level_flight(.alt_var = ALT_B) |> ggplot() + geom_point(aes(x = TIME, y = ALT_B, color = as.factor(LEVEL)))
```

DETECT AIRPORT BOX

load airport environment

```{r}
# load EGLL environment
rwys_egll <- read_csv("./data/rwys-EGLL.csv", show_col_types = FALSE)
arp_egll  <- read_csv("./data/aip.csv", show_col_types = FALSE) |>
  filter(ICAO == "EGLL", REF == "OSN-center")

rwys_egll_pts <- rwys_egll |> cast_latlon_to_pts()
rwys_egll_pts_buf <- rwys_egll_pts |> sf::st_buffer(dist = 500)
rwys_egll_box <- rwys_egll_pts_buf |> sf::st_union() |> sf::st_convex_hull()
```

```{r}
ggplot() +
  geom_sf(data = rwys_egll_pts) +
  geom_sf(data = rwys_egll_pts_buf, color = "blue", fill = NA) +
  geom_sf(data = rwys_egll_box, color = "lightgreen", fill = NA) 
```

BAW74 - ICAO24 c("400615")

checking first for overhead threshold

```{r}
fb <- baws |> filter(ICAO24 %in% c("400615")) |> cast_latlon_to_pts(.drop_coord = FALSE)

over_thr <- fb[rwys_egll_pts_buf,]

ggplot() +
  geom_sf(data = rwys_egll_pts, size = 3) +
  geom_sf(data = rwys_egll_pts_buf, color = "blue", fill = NA) +
  geom_sf(data = over_thr, color = "yellow")
```

trajectory points that fall within buffered threshold polygons

```{r}
my_trj <- fb
my_thres_buf <- rwys_egll_pts_buf

check_thr_mst <- function(.trj, .thres_buf){
  this_mst <- st_join(.trj, .thres_buf["REF"], left = FALSE) |> 
  select(ICAO24, FLTID, TIME, LAT, LON, ALT_B, REF) |> 
  mutate(MST = "THR") |> 
  mutate(
        LEAD = geometry[row_number() + 1]
      , DIST = st_distance(geometry, LEAD, by_element = T)
      , DIST = if_else(is.na(DIST), 0, as.numeric(DIST))   #correct for lead/NA
      , CUM_DIST = cumsum(DIST)
      , RLEID = consecutive_id(CUM_DIST)
    ) |> 
  sf::st_drop_geometry() |> 
  filter(TIME == min(TIME), .by = RLEID)
  return(this_mst)
}

thr_mst <- check_thr_mst(my_trj, my_thres_buf)
thr_mst
```


```{r}
baws |> filter(ICAO24 == "40073e") |> cast_latlon_to_pts(.drop_coord = FALSE) |> sf::st_crop(xmin = -1, xmax = 0, ymin = 51.2, ymax = 51.6) |>  ggplot() + geom_point(aes(x = LON, y = LAT)) + geom_sf(data = rwys_egll_pts_buf) 
```

```{r}
baw262 <- baws |> filter(ICAO24 == "40073e")
baw262_ls <- baw262 |> 
  cast_latlon_to_ls() |> 
  sf::st_crop(xmin = -0.5, xmax = 0, ymin = 51.2, ymax = 51.6)

ggplot() +
  geom_sf(data = rwys_egll_box) +
  geom_sf(data = baw262_ls)
```

```{r}
box_poly_sf  <- rwys_egll_box |> sf::st_as_sf() |> mutate(REF = "EGLL-box") |> rename(geometry = x)
this_trj_pts <- baw262 |> cast_latlon_to_pts(.drop_coord = FALSE)

# test with one
baw262 <- sf::st_join(this_trj_pts, box_poly_sf)

key_mst <- baw262 |> filter(MST %in% c("START","END")) |> 
  select(UID, ICAO24, TIME, FLTID, LAT, LON, ALT_B, MST, REF)
key_mst
```



## Start data preparation

work with dataset for a day

```{r}
source("./R/osn_dumps.R")
source("./R/osn_read_tardump.R")
source("./R/osn_make_nice_names.R")
source("./R/coerce_meter_to_feet.R")
```

```{r}
#| message: false
pth_to_dumps <- "../__DATA/OSN-dumps"
ptn <- "2019-08-01"

# list downloaded dumps
fns <- list.files(path = pth_to_dumps, pattern = ptn, full.names = TRUE)

# load list of chosen dumps
ds  <- fns |> 
  purrr::map_dfr(.f = read_osn_tar_file) |> 
  make_nice_names_osn() |> 
  mutate(ALT_B = coerce_meter_to_feet(ALT_B))
```

* filter pts within airport box (join per day runs for ~ 5mins)

```{r}
# EGLL airport box
box_sf  <- rwys_egll_box |> sf::st_as_sf() |> mutate(REF = "EGLL-box") |> rename(geometry = x)

# spatial subsetting, check alt, get ICAO24
# command x[y, ] is identical to x[y, , op = st_intersects]
seen_at_airport <- function(.pts, .poly_sf, .alt_threshold = 1000, .drop_coord = FALSE,...) {
  ds_pts  <- .pts |> cast_latlon_to_pts(.drop_coord = .drop_coord)
  # spatial subsetting, check alt, get ICAO24
  # command x[y, ] is identical to x[y, , op = st_intersects]
  inbox   <- ds_pts[.poly_sf,] |> 
    dplyr::filter(ALT_B < .alt_threshold)
  return(inbox)
}
```

```{r}
at_egll <- ds |> seen_at_airport(box_sf) 
at_egll <- at_egll |> mutate(SEEN = "AT EGLL") |> 
  summarise(BOX_MIN)
```

at egll with is.na(FLTID)
# A tibble: 214 Ã— 1
   ICAO24
   <chr> 
 1 4951c7
 2 400941
 3 4ca13d
 4 4006b0
 5 3c65cd
 6 406a3e
 7 4b17fc
 8 406ae3
 9 4010dd
10 4009da

Load validation data set

```{}
egll_fact <- read_csv2("~/RProjects/__DATA/EGLL/EGLL_2019_FACT.csv")
egll_fact <- egll_fact |> 
  select(FLTID = AP_C_FLTID, REG = AP_C_REG, ADEP = ADEP_ICAO, ADES = ADES_ICAO
         ,MVT_TIME = MVT_TIME_UTC, BLOCK_TIME = BLOCK_TIME_UTC, PHASE = SRC_PHASE
         ,TYPE = ARCTYP, CLASS = AC_CLASS, RWY = AP_C_RWY, STND = AP_C_STND)
write_csv(egll_fact, "./data/validation-EGLL-2019.csv.gz")
```
```{r}
egll_fact <- read_csv("./data/validation-EGLL-2019.csv.gz", show_col_types = FALSE) |> 
  mutate(across(.cols = contains("_TIME"), .fns = lubridate::dmy_hms))

egll_20190801 <- egll_fact |> filter(lubridate::date(MVT_TIME) == lubridate::date(ptn)) |> 
  mutate(SEEN_OSN = FLTID %in% at_egll$FLTID)
```

```{r}
egll_20190801 |> summarise(MVTS = n(), .by = PHASE) |> 
  ggplot() + 
  geom_col( aes(x = PHASE, y = MVTS)) +
  geom_text(aes(x = PHASE, y = MVTS, label = MVTS), vjust = 1.5, color = "white") +
  labs(title = "EGLL - movement count - 20190801", x = NULL, y = NULL)
```

