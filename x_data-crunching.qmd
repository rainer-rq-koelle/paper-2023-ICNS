---
title: "Data Preparation"
format: pdf
---

DEVELOPMENT VERSION

```{r}
#| message: false
library(tidyverse)
library(sf)
library(patchwork)

# set default ggplot theme
ggplot2::theme_set(ggplot2::theme_minimal())
```


## Overview

This Quarto-markdown document lists the data preparatory steps.   
The following is developed for London Heathrow.

1. Load OSN data
2. load target airport(s)


## Load OSN data

```{r}
source("./R/osn_dumps.R")
source("./R/osn_read_tardump.R")
source("./R/osn_make_nice_names.R")
source("./R/coerce_meter_to_feet.R")
source("./R/altitude_outlier_filter.R")
source("./R/trj_fix_altitude.R")
source("./R/spatial_subset_jormungand.R")
```

```{r}
#| message: false
#| warning: false
pth_to_dumps <- "../__DATA/OSN-dumps"
ptn <- "2019-08-01"

# list downloaded dumps
fns <- list.files(path = pth_to_dumps, pattern = ptn, full.names = TRUE)

# load list of chosen dumps
ds  <- fns |> 
  purrr::map_dfr(.f = read_osn_tar_file) |> 
  make_nice_names_osn() |> 
  mutate(across(.cols = c("ALT_B","ALT_G"), .fns = coerce_meter_to_feet))
```

## some trajectory cleaning

we study airborn part, i.e. from take-off to landing

* departing flights: velocity > 50 m/s
* landing flights cannot have altitude above 5000ft, velocity < 90

```{r}
ds  |> 
  filter(ICAO24 == "3c6498") |> 
  filter(velocity > 50) |> 
  Alt_Outlier_filter(.alt_var = ALT_B) |> 
  ggplot() + 
    geom_point(aes(x = TIME, y = ALT_B, color = velocity < 90 & ALT_B > 5000)) + 
    geom_point(aes(x = TIME, y = ALT_G), color = "green") +
  theme(legend.position = "top")
```

```{r}
ds  |> 
  filter(ICAO24 == "3c6498") |> 
  fix_altitude_heuristic() |> 
  Alt_Outlier_filter(.alt_var = ALT_B) |> 
  ggplot() + 
    geom_point(aes(x = TIME, y = ALT_B, color = velocity < 90 & ALT_B > 5000)) + 
    geom_point(aes(x = TIME, y = ALT_G), color = "green") +
  theme(legend.position = "top")
```


## Load target airport

```{r}
source(here::here("R", "cast_sf_utils.R"))
source(here::here("R", "cast_sf_rwy.R"))

# load EGLL environment
rwys_egll <- read_csv("./data/rwys-EGLL.csv", show_col_types = FALSE)
arp_egll  <- read_csv("./data/aip.csv", show_col_types = FALSE) |>
  filter(ICAO == "EGLL", REF == "OSN-center")

# cast sf
arp_pt    <- arp_egll  |> cast_latlon_to_pts(.drop_coord = FALSE) 
rwys_pts  <- rwys_egll |> cast_latlon_to_pts()
rwys_ls   <- rwys_egll |> cast_rwy_ls()

rwy_centerline_ls <- cast_rwy_ctr_line_ls(rwys_egll)
rwy_box           <- airport_threshold_box(rwys_egll)
airport_box       <- airport_centerline_box(rwys_egll)

# for later
jormungand <- trrrj::polygon_at_distance(c(arp_egll$LON, arp_egll$LAT), d = 205) |> 
  sf::st_as_sf() |> rename(geometry = x) |> mutate(NAME = "EGLL-205")
```

Check some of the functions and shapes

```{r}
apt_arrival_plot <- ggplot() +
  geom_sf(data = airport_box) +
  geom_sf(data = arp_pt, size = 3, color = "blue") +
  geom_sf(data = rwys_ls) +
  geom_sf(data = rwys_pts, color = "red") +
  geom_sf(data = rwy_centerline_ls, color = "green") +
  geom_sf_text(data = rwy_centerline_ls, aes(label = REF)) 
apt_arrival_plot
```

```{r}
icao24_in_polygon <- function(.ds, .poly, .id = ICAO24){
  # determine bounding box for polygon
  this_box <- sf::st_bbox(.poly)
  # pre-filter with dplyr - cut bounding box
  icao24s <- .ds |> 
    dplyr::filter(
       LAT > this_box$ymin, LAT < this_box$ymax
      ,LON > this_box$xmin, LON < this_box$xmax, 
    )
  # get ids seen
  icao24s <- icao24s |> 
    dplyr::summarise(
      N = n(), N_ID = length(unique(FLTID))
      , MIN_TIME = min(TIME,na.rm = TRUE)
      , MIN_TIME_ALT = ALT_B[which(TIME == MIN_TIME)]
      , MAX_TIME = max(TIME, na.rm = TRUE)
      , MAX_TIME_ALT = ALT_B[which(TIME == MAX_TIME)]
      , MIN_ALT = min(ALT_B, na.rm = TRUE)
      , MED_ALT = median(ALT_B, na.rm = TRUE)
      , MAX_ALT = max(ALT_B, na.rm = TRUE)
      , .by = {{.id}})
}
```

```{r}
seen_at_airport <- icao24_in_polygon(ds, airport_box)
seen_at_airport
```

```{r}
source("~/RProjects/paper-2023-ICNS/R/trj_identify_legs.R")
source("~/RProjects/paper-2023-ICNS/R/coerce_unixepoch_to_datetime.R")
source("~/RProjects/paper-2023-ICNS/R/trj_fix_fltid.R")
source("~/RProjects/paper-2023-ICNS/R/add_distance_rowwise.R")
source("~/RProjects/paper-2023-ICNS/R/trj_fix_altitude.R")
source("~/RProjects/paper-2023-ICNS/R/heuristic_DAO.R")

# helper function to check missing FLTID or gaps
check_leg_fltid <- function(.trjs_with_legs, ...){
  .trjs_with_legs |> 
    dplyr::summarise(
        N = n(), N_ID = length(unique(FLTID))
      , IDs = paste(unique(FLTID), collapse = "-")
      , NAs = sum(is.na(FLTID))
      , .by = c("ICAO24","LEG")
      )
}
```

```{r}
rq <- ds |> 
  # subset for ICAO24s seen at the study airport
  filter(ICAO24 %in% seen_at_airport$ICAO24) |> 
  spatial_subset_jormungand(jormungand) |> 
  # human readable TIME
  coerce_unixepoch_to_datetime() |>
  # clean ALT and trim for airborne part with heuristic fix
  Alt_Outlier_filter(.alt_var = ALT_B) |> 
  fix_altitude_heuristic() |> 
  # assign leg for each airborne segment
  identify_trajectory_legs() |> 
  # force single FLTID here to construct niche UIDs
  group_by(ICAO24, LEG) |> fix_invalid_fltid() |> ungroup() |> 
  # construct UID
  mutate(UID = paste(ICAO24, LEG, sep = "-")) 

# check one more time for airport
seen_at_airport2 <- icao24_in_polygon(rq |> sf::st_drop_geometry(), airport_box, UID) |> 
  heuristic_DAO()
seen_at_airport2
```

```{r}
viz_check_DAO <- function(.trj, .apt_box = airport_box){
  plt <- .trj |> 
    ggplot() + 
      geom_sf(data = .apt_box) + 
      geom_point(data = .trj, aes(x = LON, y = LAT, color = TIME)) + 
      coord_sf(xlim = c(-1, 0), ylim = c(51.3, 51.6), expand = FALSE)
  return(plt)
}

viz_check_vertical <- function(.trj){
  plt <- .trj |> 
    ggplot() +
    geom_point(aes(x = TIME, y = ALT_B))
  return(plt)
}

picks <- seen_at_airport2$UID[1:9]

rq |> filter(UID %in% picks) |> viz_check_DAO() + facet_wrap(.~UID)
```

per arrival trajectory (iterate, group modify)

* subset to 200NM (done - jormungand)
```{r}
fig <- ggplot() + geom_sf(data = arr_trjs |> cast_pts_to_ls(.group_var = UID)) +
  labs(subtitle = paste("EGLL arrivals", ptn, sep = "-")) +
  theme(plot.title.position = "plot")
#ggsave(plot = fig, filename = "./figures/EGLL-arrivals-single-day.png", dpi = 300, height = 5, width = 5)
fig
```

* initialise mst (done - initialise milestone table function on filtered trajectories)
* assign landing runway & landing time
* calculate characteristics
  + time-to-go
  + distance-to-go
  + crossings (e.g for ASMA)
  
* save out mst/enriched trajectory

```{r}
source("~/RProjects/paper-2023-ICNS/R/milestone_functions.R")
arr_trjs <- rq |> filter(UID %in% (seen_at_airport2 |> filter(DAO == "A") |> pull(UID)) )
mst <- initialise_milestone_table(arr_trjs)
mst
```

landing runway assignment

```{r}
source("~/RProjects/paper-2023-ICNS/R/trj_landing_runway.R")

# test for one
arr_rwy <- arr_trjs |> filter(UID == "00b1f9-0") |> assign_landing_runway()
arr_rwy

arr_rwys <- arr_trjs |> assign_landing_runway()
arr_rwys
```

```{r}
arr_rwys |> ggplot() + geom_histogram(aes(x = TRUST), bindwidth = 2)
```

# check for some fringe cases

```{r}
fringe_picks <-  arr_rwys |> filter(between(TRUST, 0.4,0.7)) 

viz_check_DAO(arr_trjs |> filter(UID %in% fringe_picks$UID)) + facet_wrap(.~ UID)
```

Potential to remove = no landing with TRUST < 0.7

* assign landing runway & landing time

do for one/some

> arr_rwys
# A tibble: 733 Ã— 6
# Groups:   UID [733]
   UID      REF       N   TOT TRUST COMMENT                                                      
   <chr>    <chr> <int> <int> <dbl> <chr>                                                        
 1 00b1f9-0 27L      13    16 0.812 landing runway: 27L trust-Level (hits: 13): 0.8125           
 2 01013c-0 27L      11    14 0.786 landing runway: 27L trust-Level (hits: 11): 0.785714285714286
 3 0101bb-0 27R      12    15 0.8   landing runway: 27R trust-Level (hits: 12): 0.8              
 4 0200cb-0 27R      12    15 0.8   landing runway: 27R trust-Level (hits: 12): 0.8              
 5 04014c-0 27L      12    15 0.8   landing runway: 27L trust-Level (hits: 12): 0.8              
 6 04c15b-0 27R      11    14 0.786 landing runway: 27R trust-Level (hits: 11): 0.785714285714286
 7 06a0e6-0 27R      12    15 0.8   landing runway: 27R trust-Level (hits: 12): 0.8              
 8 06a11f-0 27R      12    15 0.8   landing runway: 27R trust-Level (hits: 12): 0.8              
 9 06a144-0 27L      13    16 0.812 landing runway: 27L trust-Level (hits: 13): 0.8125           
10 06a149-0 27L      13    16 0.812 landing runway: 27L trust-Level (hits: 13): 0.8125  

```{r}
arr_trjs |> filter(UID %in% c("00b1f9-0","01013c-0","0101bb-0","0200cb-0")) |> 
  viz_check_DAO() + facet_wrap(.~UID)
```

```{r}
arr_trjs |> filter(UID %in% c("00b1f9-0")) |> 
  ggplot(
    aes(  x = TIME
        , y = ALT_B
        , color = between(ALT_B, arp_egll$ELEV + 100, arp_egll$ELEV + 1000)
        )
    ) + 
  geom_point() + labs(color = "Approach")
```

```{r}
source("~/RProjects/paper-2023-ICNS/R/cast_sf_network.R")

arp  <- arp_egll
rwys <- rwys_egll

final <- arr_trjs |> filter(UID %in% c("00b1f9-0")) |>
  filter(ALT_B < arp$ELEV + 2000)

ldg_rwy <- final |> assign_landing_runway(.arp = arp) |> 
  inner_join(rwys, by = "REF")
my_thr  <- ldg_rwy |> select(UID, REF, LAT, LON, COMMENT) |> cast_latlon_to_pts(.drop_coord = FALSE) 

final_sfn <- final |> cast_latLon_to_sfnet()
# blend crossing in network
# c.f. https://luukvdmeer.github.io/sfnetworks/reference/st_network_blend.html
# blend points with a tolerance.
# tol = units::set_units(50, "m")
final_sfn <- final_sfn %>%
    sfnetworks::st_network_blend(my_thr |> select(REF, geometry)) #, tolerance = tol)

viz_check_vertical(final) + viz_check_DAO(final)
```

check for blended point
final_sfn |> activate("nodes") |> filter(is.na(TIME)) |> select(TIME, ICAO24, LAT, LON, ALT_B, geometry)

point is injected, need to fill details, e.g. TIME
then extract nodes ~ enriched sequence of final points (maybe use sequence number)


NEXT-NEXT
* calculate characteristics
  + time-to-go
  + distance-to-go
  + crossings (e.g for ASMA)
  
* save out mst/enriched trajectory